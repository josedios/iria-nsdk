version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: prompt-maestro-db
    environment:
      POSTGRES_DB: prompt_maestro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - prompt-maestro-network

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: prompt-maestro-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/prompt_maestro
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /tmp/repositories:/tmp/repositories
    networks:
      - prompt-maestro-network
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: prompt-maestro-frontend
    ports:
      - "4200:4200"
    environment:
      - API_URL=http://localhost:8000
      - NODE_ENV=development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - prompt-maestro-network
    command: npm start

  # Redis para caché y colas
  redis:
    image: redis:7-alpine
    container_name: prompt-maestro-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prompt-maestro-network

  # Qdrant Vector Database (opcional)
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: prompt-maestro-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - prompt-maestro-network

  # Nginx para proxy reverso (producción)
  nginx:
    image: nginx:alpine
    container_name: prompt-maestro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - prompt-maestro-network
    profiles:
      - production

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: prompt-maestro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - prompt-maestro-network
    profiles:
      - monitoring

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: prompt-maestro-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - prompt-maestro-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  prompt-maestro-network:
    driver: bridge